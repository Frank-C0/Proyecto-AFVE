class Monitor

  types
    public EstadosSensoresSism ::
        cambioTemperatura: SensorGeoterm`CambioTemp
        magnitudSism: SensorSism`MagnitudSismo
        actividad: SensorSism`EstadoSism;

    public EstadoVolcan = 
      <Normal> | <Precaucion> | <Peligro> | <Evacuacion> | <Emergencia>;

  instance variables
    private id: nat1;
    private volcan: Volcan;
    private alarma: EstadoVolcan;
    
  operations
    public Monitor: nat1 * Volcan ==> Monitor
    Monitor(i, v) ==(
      id := i;
      volcan := v;
      alarma := <Normal>;
      return self;
    )
    pre i > 0 and v.GetListaSensoresGeoterm() <> [] and v.GetListaSensoresSism() <> [];
    
    public GetID: () ==> nat1
    GetID() == return id;

    -- Obtener el volcán asociado al monitor
    public GetVolcan: () ==> Volcan
    GetVolcan() == return volcan;

    -- Obtener el estado de alarma del monitor
    public GetAlarma: () ==> EstadoVolcan
    GetAlarma() == return alarma;

    --  Obtener la lectura más alta de los sensores geotérmicos
    private ObtenerMaximaLecturaGeotermica: () ==> SensorGeoterm`CambioTemp
    ObtenerMaximaLecturaGeotermica() == (
      let listaSensoresGeoterm: seq of SensorGeoterm = volcan.GetListaSensoresGeoterm() in
      (dcl maxLecturaSensor: real := listaSensoresGeoterm(1).GetUltimoCambioTemperatura();
        for sensorGeotermico in listaSensoresGeoterm do
          if sensorGeotermico.GetUltimoCambioTemperatura() > maxLecturaSensor then
            maxLecturaSensor := sensorGeotermico.GetUltimoCambioTemperatura(); 
        return SensorGeoterm`ClasificarCambioTemperatura(maxLecturaSensor);
      )
    );

    private ObtenerMaximaLecturaMagnitud: () ==> SensorSism`MagnitudSismo
    ObtenerMaximaLecturaMagnitud() == (
      let listaSensoresSism: seq of SensorSism= volcan.GetListaSensoresSism() in
      (
        dcl maxLecturaSensor: real := listaSensoresSism(1).GetMagnitudActual();  
        for sensorSism in listaSensoresSism do
          if sensorSism.GetMagnitudActual() > maxLecturaSensor then
            maxLecturaSensor := sensorSism.GetMagnitudActual();
        return SensorSism`ClasificarMagnitudSismo(maxLecturaSensor);
      )
    );

    private ObtenerMaximaLecturaActividad: () ==> SensorSism`EstadoSism
    ObtenerMaximaLecturaActividad() == (
        let listaSensoresSism: seq of SensorSism= volcan.GetListaSensoresSism() in
        (
          dcl maxLecturaSensor: real := listaSensoresSism(1).GetNumActividad(); 
          for sensorSism in listaSensoresSism do
            if sensorSism.GetNumActividad() > maxLecturaSensor then
              maxLecturaSensor := sensorSism.GetNumActividad();
          return SensorSism`ClasificarActividadSismica(maxLecturaSensor);
        )
      );
    public ActualizarEstado: () ==> ()
    ActualizarEstado() == (
      alarma := mapEstado(
        ObtenerMaximaLecturaMagnitud(),
        ObtenerMaximaLecturaActividad(),
        ObtenerMaximaLecturaGeotermica()
        );
    );
    
  private mapEstado: SensorSism`MagnitudSismo * SensorSism`EstadoSism * SensorGeoterm`CambioTemp ==> EstadoVolcan
  mapEstado(magnitudSism, actividad, cambioTemperatura) == (
    if magnitudSism = <grandesTerremotos> or
       magnitudSism = <terremotosMuyGrandes> or
       magnitudSism = <terremotosMayores> or
       magnitudSism = <terremotosFuertes>
    then
      return <Emergencia>
    elseif cambioTemperatura = <Brusco> then
      if actividad = <muyActivo> then
        if magnitudSism = <noterremoto> then
          return <Peligro>
        else
          return <Evacuacion>
      elseif magnitudSism = <terremotosModerados> then
        return <Evacuacion>
      else
        return <Peligro>
    elseif actividad = <muyActivo> then
      if magnitudSism = <terremotosModerados> then
        return <Evacuacion>
      else
        return <Peligro>
    elseif magnitudSism = <terremotosModerados> then
      return <Peligro>
    elseif magnitudSism = <noterremoto> then
      return <Normal>
    else
      return <Precaucion>
  );
end Monitor