class SensorGeoterm is subclass of Sensor
  types
    public CambioTemp = <Leve> | <Moderado> | <Brusco>;
    public POSIX_Time = nat
      inv t == t >=0;
    public RegistroTemperaturaTiempo :: 
      tiempo: POSIX_Time
      temperatura: Kelvin
      inv mk_RegistroTemperaturaTiempo(t,m) == t >= 0 and m >= 0;
    public Kelvin = real
      inv k == k >= 0;

  instance variables
    private cambioTemperatura: CambioTemp;
    private listaTemperaturas: seq of RegistroTemperaturaTiempo;
    private cambioTemperaturaReal: real;

  operations
    public SensorGeoterm: nat1 * real * real * real * bool * nat1 * nat1 * nat1 ==> SensorGeoterm
    SensorGeoterm(i, x, y, z, activo, anio, mes, dia) == (
        cambioTemperatura := <Leve> ;
        listaTemperaturas := [];
        cambioTemperaturaReal := 0;

        self.Sensor(i, x, y, z, activo, anio, mes, dia);        
      )
      pre i > 0 and anio > 0 and mes > 0 and mes <= 12 and dia > 0 and dia <= 31;

    -- Obtener el cambio de temperatura del sensor geotérmico
    public GetCambioTemperatura: () ==> CambioTemp
    GetCambioTemperatura() == return cambioTemperatura;

    public GetUltimoCambioTemperatura: () ==> real
    GetUltimoCambioTemperatura() == return cambioTemperaturaReal;

    -- Agregar un registro de temperatura a la lista
    public AgregarRegistroTemperatura: Kelvin * POSIX_Time ==> ()
    AgregarRegistroTemperatura(temp, tiempo) == (
      listaTemperaturas := listaTemperaturas ^ [mk_RegistroTemperaturaTiempo(tiempo, temp)];
      CalcularCambioTemperatura();
      cambioTemperatura := ClasificarCambioTemperatura(cambioTemperaturaReal);
    )
    pre EstaActivo() = true;
      
    -- Calcular el cambio de temperatura entre los dos últimos registros
    public CalcularCambioTemperatura: () ==> ()
    CalcularCambioTemperatura() ==
      if len listaTemperaturas >= 2 then
        let
          ultimaTemp = listaTemperaturas(len listaTemperaturas).temperatura,
          penultimaTemp = listaTemperaturas(len listaTemperaturas - 1).temperatura
        in
          cambioTemperaturaReal := ultimaTemp - penultimaTemp
      else
        cambioTemperaturaReal := 0;

    -- Clasificar el cambio de temperatura según los rangos especificados
    public static ClasificarCambioTemperatura: real ==> CambioTemp
    ClasificarCambioTemperatura(cambioTemp) ==
      if cambioTemp<= 2.0 then
        return <Leve>
      elseif cambioTemp<= 5.0 then
        return <Moderado>
      else
        return <Brusco>;
end SensorGeoterm