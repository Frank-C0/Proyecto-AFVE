class SensorSism is subclass of Sensor

  types
    public MagnitudSismo = 
      <microTerremotos> | <pequenosTerremotos> | <terremotosModerados> |
      <terremotosFuertes> | <terremotosMayores> | <grandesTerremotos> | 
      <terremotosMuyGrandes> | <noterremoto>;
    
    public EstadoSism = <muyActivo> | <moderadamenteActivo> | <pocoActivo> | <inactivo>;
    
    public RegistroMagnitudTiempo :: 
      tiempo: POSIX_Time
      magnitud: real
      inv mk_RegistroMagnitudTiempo(t,m) == t >= 0 and m >= 0;

    public POSIX_Time = nat
      inv t == t >=0;

  -- inv  forall registro in set magnitudes & registro.magnitud > 0;

  instance variables
    private estadoActual: MagnitudSismo;
    private actividad: EstadoSism;
    private magnitudes: seq of RegistroMagnitudTiempo := [];

  operations

    public SensorSism: nat1 * real * real * real * bool * 
      nat1 * nat1 * nat1 ==> SensorSism
    SensorSism
    (i, x, y, z, activo, anio, mes, dia)
    ==
    (
      estadoActual := <noterremoto>;
      actividad := <inactivo>;
      magnitudes := [];
      
      self.Sensor(i, x, y, z, activo, anio, mes, dia);
      return self;
    )
    pre i > 0 and anio > 0 and mes > 0 and mes <= 12 and dia > 0 and dia <= 31;

    -- Función para transformar una Hora a segundos
    -- public HoraASegundos: Hora ==> nat
    -- HoraASegundos(hora) == return hora.hour * 3600 + hora.minute * 60 + hora.second;

    -- Función para actualizar el estado según la magnitud del nuevo registro
    private ActualizarEstadoSegunMagnitud: real ==> ()
    ActualizarEstadoSegunMagnitud(magnitud) ==
      (
        if magnitud < 0.5 then
          estadoActual := <noterremoto>
        elseif magnitud < 3.0 then
          estadoActual := <microTerremotos>
        elseif magnitud < 4.0 then
          estadoActual := <pequenosTerremotos>
        elseif magnitud < 5.0 then
          estadoActual := <terremotosModerados>
        elseif magnitud < 6.0 then
          estadoActual := <terremotosFuertes>
        elseif magnitud < 7.0 then
          estadoActual := <terremotosMayores>
        elseif magnitud < 8.0 then
          estadoActual := <grandesTerremotos>
        else
          estadoActual := <terremotosMuyGrandes>
      );

    private ActualizarActividadSegunMagnitudes: () ==> ()
    ActualizarActividadSegunMagnitudes() ==
      (
        -- Contar magnitudes mayores a 0.5 en las últimas 24 horas
        let cantidadEventos = len [reg | reg in seq magnitudes & reg.magnitud > 0.5] in
          if cantidadEventos > 8 then
            actividad := <muyActivo>  
          elseif cantidadEventos >= 3 and cantidadEventos <= 8 then
            actividad := <moderadamenteActivo>
          elseif cantidadEventos >= 1 and cantidadEventos <= 3 then
            actividad := <pocoActivo>
          else
            actividad := <inactivo>
      );

    -- Función para verificar y eliminar registros antiguos
    private VerificarEliminarRegistrosAntiguos: POSIX_Time ==> ()
    VerificarEliminarRegistrosAntiguos(tiempoActual) ==
      (
        magnitudes := [reg | reg in seq magnitudes & tiempoActual - reg.tiempo <= 24 * 60 * 60 * 1000 * 1000];
      );

    -- Agregar una magnitud y tiempo a la lista del sismómetro
    public AgregarMagnitudTiempo: real * POSIX_Time ==> ()
    AgregarMagnitudTiempo(magnitud, tiempo) ==
      (
        -- Verificar y eliminar registros antiguos
        
        VerificarEliminarRegistrosAntiguos(tiempo);
        -- Actualizar el estado según la magnitud del nuevo registro
        ActualizarEstadoSegunMagnitud(magnitud);
        -- Agregar el nuevo registro
        magnitudes := magnitudes ^ [mk_RegistroMagnitudTiempo(tiempo, magnitud)];
        -- Actualizar la actividad según las magnitudes en las últimas 24 horas
        ActualizarActividadSegunMagnitudes();
      );

    -- Obtener el estado actual del sismómetro
    public GetEstadoActual: () ==> MagnitudSismo
    GetEstadoActual() == return estadoActual;

    -- Obtener la actividad del sismómetro
    public GetActividad: () ==> EstadoSism
    GetActividad() == return actividad;

    -- Obtener la magnitud actual del sismómetro
    -- public GetMagnitudActual: () ==> real
    -- GetMagnitudActual() == return magnitudes(len magnitudes).magnitud
    --   pre magnitudes <> [];

    -- Obtener las magnitudes y tiempos almacenados del sismómetro
    -- public GetMagnitudes: () ==> seq of RegistroMagnitudTiempo
    -- GetMagnitudes() == return magnitudes;

end SensorSism
